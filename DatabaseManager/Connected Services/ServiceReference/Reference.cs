//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag.Abstr" +
        "action")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.OutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.DigitalOutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.AnalogOutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.InputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.AnalogInputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.DigitalInputTag))]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IOAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IOAddress {
            get {
                return this.IOAddressField;
            }
            set {
                if ((this.IOAddressField.Equals(value) != true)) {
                    this.IOAddressField = value;
                    this.RaisePropertyChanged("IOAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag.Abstr" +
        "action")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.DigitalOutputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.AnalogOutputTag))]
    public partial class OutputTag : DatabaseManager.ServiceReference.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InitialValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalOutputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag")]
    [System.SerializableAttribute()]
    public partial class DigitalOutputTag : DatabaseManager.ServiceReference.OutputTag {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogOutputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag")]
    [System.SerializableAttribute()]
    public partial class AnalogOutputTag : DatabaseManager.ServiceReference.OutputTag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag.Abstr" +
        "action")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.AnalogInputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference.DigitalInputTag))]
    public partial class InputTag : DatabaseManager.ServiceReference.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.DriverType DriverTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ScanField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.DriverType DriverType {
            get {
                return this.DriverTypeField;
            }
            set {
                if ((this.DriverTypeField.Equals(value) != true)) {
                    this.DriverTypeField = value;
                    this.RaisePropertyChanged("DriverType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Scan {
            get {
                return this.ScanField;
            }
            set {
                if ((this.ScanField.Equals(value) != true)) {
                    this.ScanField = value;
                    this.RaisePropertyChanged("Scan");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogInputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag")]
    [System.SerializableAttribute()]
    public partial class AnalogInputTag : DatabaseManager.ServiceReference.InputTag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalInputTag", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag")]
    [System.SerializableAttribute()]
    public partial class DigitalInputTag : DatabaseManager.ServiceReference.InputTag {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DriverType", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Enumerati" +
        "on")]
    public enum DriverType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Simulation = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Realtime = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Alarm")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.AlarmType AlarmTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.Priority PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.AlarmType AlarmType {
            get {
                return this.AlarmTypeField;
            }
            set {
                if ((this.AlarmTypeField.Equals(value) != true)) {
                    this.AlarmTypeField = value;
                    this.RaisePropertyChanged("AlarmType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.Priority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmType", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Enumerati" +
        "on")]
    public enum AlarmType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Priority", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Enumerati" +
        "on")]
    public enum Priority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medium = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagsState", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag")]
    [System.SerializableAttribute()]
    public partial class TagsState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.AnalogInputTag[] AnalogInputTagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.AnalogOutputTag[] AnalogOutputTagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.DigitalInputTag[] DigitalInputTagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DatabaseManager.ServiceReference.DigitalOutputTag[] DigitalOutputTagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.AnalogInputTag[] AnalogInputTags {
            get {
                return this.AnalogInputTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalogInputTagsField, value) != true)) {
                    this.AnalogInputTagsField = value;
                    this.RaisePropertyChanged("AnalogInputTags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.AnalogOutputTag[] AnalogOutputTags {
            get {
                return this.AnalogOutputTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalogOutputTagsField, value) != true)) {
                    this.AnalogOutputTagsField = value;
                    this.RaisePropertyChanged("AnalogOutputTags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.DigitalInputTag[] DigitalInputTags {
            get {
                return this.DigitalInputTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.DigitalInputTagsField, value) != true)) {
                    this.DigitalInputTagsField = value;
                    this.RaisePropertyChanged("DigitalInputTags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseManager.ServiceReference.DigitalOutputTag[] DigitalOutputTags {
            get {
                return this.DigitalOutputTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.DigitalOutputTagsField, value) != true)) {
                    this.DigitalOutputTagsField = value;
                    this.RaisePropertyChanged("DigitalOutputTags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAuthenticationManager")]
    public interface IAuthenticationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Login", ReplyAction="http://tempuri.org/IAuthenticationManager/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Login", ReplyAction="http://tempuri.org/IAuthenticationManager/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Register", ReplyAction="http://tempuri.org/IAuthenticationManager/RegisterResponse")]
        bool Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Register", ReplyAction="http://tempuri.org/IAuthenticationManager/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Logout", ReplyAction="http://tempuri.org/IAuthenticationManager/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Logout", ReplyAction="http://tempuri.org/IAuthenticationManager/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationManagerChannel : DatabaseManager.ServiceReference.IAuthenticationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.IAuthenticationManager>, DatabaseManager.ServiceReference.IAuthenticationManager {
        
        public AuthenticationManagerClient() {
        }
        
        public AuthenticationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Register(string username, string password) {
            return base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ITagManager")]
    public interface ITagManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddDigitalInputTag", ReplyAction="http://tempuri.org/ITagManager/AddDigitalInputTagResponse")]
        bool AddDigitalInputTag(string token, DatabaseManager.ServiceReference.DigitalInputTag digitalInputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddDigitalInputTag", ReplyAction="http://tempuri.org/ITagManager/AddDigitalInputTagResponse")]
        System.Threading.Tasks.Task<bool> AddDigitalInputTagAsync(string token, DatabaseManager.ServiceReference.DigitalInputTag digitalInputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddDigitalOutputTag", ReplyAction="http://tempuri.org/ITagManager/AddDigitalOutputTagResponse")]
        bool AddDigitalOutputTag(string token, DatabaseManager.ServiceReference.DigitalOutputTag digitalOutputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddDigitalOutputTag", ReplyAction="http://tempuri.org/ITagManager/AddDigitalOutputTagResponse")]
        System.Threading.Tasks.Task<bool> AddDigitalOutputTagAsync(string token, DatabaseManager.ServiceReference.DigitalOutputTag digitalOutputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddAnalogInputTag", ReplyAction="http://tempuri.org/ITagManager/AddAnalogInputTagResponse")]
        bool AddAnalogInputTag(string token, DatabaseManager.ServiceReference.AnalogInputTag analogInputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddAnalogInputTag", ReplyAction="http://tempuri.org/ITagManager/AddAnalogInputTagResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogInputTagAsync(string token, DatabaseManager.ServiceReference.AnalogInputTag analogInputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddAnalogOutputTag", ReplyAction="http://tempuri.org/ITagManager/AddAnalogOutputTagResponse")]
        bool AddAnalogOutputTag(string token, DatabaseManager.ServiceReference.AnalogOutputTag analogOutputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/AddAnalogOutputTag", ReplyAction="http://tempuri.org/ITagManager/AddAnalogOutputTagResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogOutputTagAsync(string token, DatabaseManager.ServiceReference.AnalogOutputTag analogOutputTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/RemoveTag", ReplyAction="http://tempuri.org/ITagManager/RemoveTagResponse")]
        bool RemoveTag(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/RemoveTag", ReplyAction="http://tempuri.org/ITagManager/RemoveTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveTagAsync(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/GetTagsState", ReplyAction="http://tempuri.org/ITagManager/GetTagsStateResponse")]
        DatabaseManager.ServiceReference.TagsState GetTagsState(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagManager/GetTagsState", ReplyAction="http://tempuri.org/ITagManager/GetTagsStateResponse")]
        System.Threading.Tasks.Task<DatabaseManager.ServiceReference.TagsState> GetTagsStateAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagManagerChannel : DatabaseManager.ServiceReference.ITagManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.ITagManager>, DatabaseManager.ServiceReference.ITagManager {
        
        public TagManagerClient() {
        }
        
        public TagManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddDigitalInputTag(string token, DatabaseManager.ServiceReference.DigitalInputTag digitalInputTag) {
            return base.Channel.AddDigitalInputTag(token, digitalInputTag);
        }
        
        public System.Threading.Tasks.Task<bool> AddDigitalInputTagAsync(string token, DatabaseManager.ServiceReference.DigitalInputTag digitalInputTag) {
            return base.Channel.AddDigitalInputTagAsync(token, digitalInputTag);
        }
        
        public bool AddDigitalOutputTag(string token, DatabaseManager.ServiceReference.DigitalOutputTag digitalOutputTag) {
            return base.Channel.AddDigitalOutputTag(token, digitalOutputTag);
        }
        
        public System.Threading.Tasks.Task<bool> AddDigitalOutputTagAsync(string token, DatabaseManager.ServiceReference.DigitalOutputTag digitalOutputTag) {
            return base.Channel.AddDigitalOutputTagAsync(token, digitalOutputTag);
        }
        
        public bool AddAnalogInputTag(string token, DatabaseManager.ServiceReference.AnalogInputTag analogInputTag) {
            return base.Channel.AddAnalogInputTag(token, analogInputTag);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogInputTagAsync(string token, DatabaseManager.ServiceReference.AnalogInputTag analogInputTag) {
            return base.Channel.AddAnalogInputTagAsync(token, analogInputTag);
        }
        
        public bool AddAnalogOutputTag(string token, DatabaseManager.ServiceReference.AnalogOutputTag analogOutputTag) {
            return base.Channel.AddAnalogOutputTag(token, analogOutputTag);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogOutputTagAsync(string token, DatabaseManager.ServiceReference.AnalogOutputTag analogOutputTag) {
            return base.Channel.AddAnalogOutputTagAsync(token, analogOutputTag);
        }
        
        public bool RemoveTag(string token, string tagName) {
            return base.Channel.RemoveTag(token, tagName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTagAsync(string token, string tagName) {
            return base.Channel.RemoveTagAsync(token, tagName);
        }
        
        public DatabaseManager.ServiceReference.TagsState GetTagsState(string token) {
            return base.Channel.GetTagsState(token);
        }
        
        public System.Threading.Tasks.Task<DatabaseManager.ServiceReference.TagsState> GetTagsStateAsync(string token) {
            return base.Channel.GetTagsStateAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TurnScanOn", ReplyAction="http://tempuri.org/IDatabaseManager/TurnScanOnResponse")]
        bool TurnScanOn(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TurnScanOn", ReplyAction="http://tempuri.org/IDatabaseManager/TurnScanOnResponse")]
        System.Threading.Tasks.Task<bool> TurnScanOnAsync(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TurnScanOff", ReplyAction="http://tempuri.org/IDatabaseManager/TurnScanOffResponse")]
        bool TurnScanOff(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/TurnScanOff", ReplyAction="http://tempuri.org/IDatabaseManager/TurnScanOffResponse")]
        System.Threading.Tasks.Task<bool> TurnScanOffAsync(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        bool ChangeOutputValue(string token, string tagName, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task<bool> ChangeOutputValueAsync(string token, string tagName, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValueResponse")]
        double GetOutputValue(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValueResponse")]
        System.Threading.Tasks.Task<double> GetOutputValueAsync(string token, string tagName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.ServiceReference.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.IDatabaseManager>, DatabaseManager.ServiceReference.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool TurnScanOn(string token, string tagName) {
            return base.Channel.TurnScanOn(token, tagName);
        }
        
        public System.Threading.Tasks.Task<bool> TurnScanOnAsync(string token, string tagName) {
            return base.Channel.TurnScanOnAsync(token, tagName);
        }
        
        public bool TurnScanOff(string token, string tagName) {
            return base.Channel.TurnScanOff(token, tagName);
        }
        
        public System.Threading.Tasks.Task<bool> TurnScanOffAsync(string token, string tagName) {
            return base.Channel.TurnScanOffAsync(token, tagName);
        }
        
        public bool ChangeOutputValue(string token, string tagName, double newValue) {
            return base.Channel.ChangeOutputValue(token, tagName, newValue);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeOutputValueAsync(string token, string tagName, double newValue) {
            return base.Channel.ChangeOutputValueAsync(token, tagName, newValue);
        }
        
        public double GetOutputValue(string token, string tagName) {
            return base.Channel.GetOutputValue(token, tagName);
        }
        
        public System.Threading.Tasks.Task<double> GetOutputValueAsync(string token, string tagName) {
            return base.Channel.GetOutputValueAsync(token, tagName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAlarmManager")]
    public interface IAlarmManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmManager/GetAlarmsForTag", ReplyAction="http://tempuri.org/IAlarmManager/GetAlarmsForTagResponse")]
        DatabaseManager.ServiceReference.Alarm[] GetAlarmsForTag(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmManager/GetAlarmsForTag", ReplyAction="http://tempuri.org/IAlarmManager/GetAlarmsForTagResponse")]
        System.Threading.Tasks.Task<DatabaseManager.ServiceReference.Alarm[]> GetAlarmsForTagAsync(string token, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmManager/AddAlarmForTag", ReplyAction="http://tempuri.org/IAlarmManager/AddAlarmForTagResponse")]
        bool AddAlarmForTag(string token, string tagName, DatabaseManager.ServiceReference.Alarm alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmManager/AddAlarmForTag", ReplyAction="http://tempuri.org/IAlarmManager/AddAlarmForTagResponse")]
        System.Threading.Tasks.Task<bool> AddAlarmForTagAsync(string token, string tagName, DatabaseManager.ServiceReference.Alarm alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmManager/RemoveAlarmForTag", ReplyAction="http://tempuri.org/IAlarmManager/RemoveAlarmForTagResponse")]
        bool RemoveAlarmForTag(string token, string tagName, string alarmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmManager/RemoveAlarmForTag", ReplyAction="http://tempuri.org/IAlarmManager/RemoveAlarmForTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveAlarmForTagAsync(string token, string tagName, string alarmName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmManagerChannel : DatabaseManager.ServiceReference.IAlarmManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.IAlarmManager>, DatabaseManager.ServiceReference.IAlarmManager {
        
        public AlarmManagerClient() {
        }
        
        public AlarmManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AlarmManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DatabaseManager.ServiceReference.Alarm[] GetAlarmsForTag(string token, string tagName) {
            return base.Channel.GetAlarmsForTag(token, tagName);
        }
        
        public System.Threading.Tasks.Task<DatabaseManager.ServiceReference.Alarm[]> GetAlarmsForTagAsync(string token, string tagName) {
            return base.Channel.GetAlarmsForTagAsync(token, tagName);
        }
        
        public bool AddAlarmForTag(string token, string tagName, DatabaseManager.ServiceReference.Alarm alarm) {
            return base.Channel.AddAlarmForTag(token, tagName, alarm);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlarmForTagAsync(string token, string tagName, DatabaseManager.ServiceReference.Alarm alarm) {
            return base.Channel.AddAlarmForTagAsync(token, tagName, alarm);
        }
        
        public bool RemoveAlarmForTag(string token, string tagName, string alarmName) {
            return base.Channel.RemoveAlarmForTag(token, tagName, alarmName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAlarmForTagAsync(string token, string tagName, string alarmName) {
            return base.Channel.RemoveAlarmForTagAsync(token, tagName, alarmName);
        }
    }
}
