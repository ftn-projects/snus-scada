//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Priority", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Enumerati" +
        "on")]
    public enum Priority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medium = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmInvocation", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Alarm")]
    [System.SerializableAttribute()]
    public partial class AlarmInvocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LimitDeltaValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ReportManager.ServiceReference.Priority PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LimitDeltaValue {
            get {
                return this.LimitDeltaValueField;
            }
            set {
                if ((this.LimitDeltaValueField.Equals(value) != true)) {
                    this.LimitDeltaValueField = value;
                    this.RaisePropertyChanged("LimitDeltaValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReportManager.ServiceReference.Priority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputTagValue", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Tag")]
    [System.SerializableAttribute()]
    public partial class InputTagValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ReportManager.ServiceReference.DriverType DriverTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InputTagTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReportManager.ServiceReference.DriverType DriverType {
            get {
                return this.DriverTypeField;
            }
            set {
                if ((this.DriverTypeField.Equals(value) != true)) {
                    this.DriverTypeField = value;
                    this.RaisePropertyChanged("DriverType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InputTagType {
            get {
                return this.InputTagTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.InputTagTypeField, value) != true)) {
                    this.InputTagTypeField = value;
                    this.RaisePropertyChanged("InputTagType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DriverType", Namespace="http://schemas.datacontract.org/2004/07/SCADACore.Infrastructure.Domain.Enumerati" +
        "on")]
    public enum DriverType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Simulation = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Realtime = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IReportManager")]
    public interface IReportManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsByPriorityResponse")]
        ReportManager.ServiceReference.AlarmInvocation[] GetAlarmsByPriority(ReportManager.ServiceReference.Priority priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference.AlarmInvocation[]> GetAlarmsByPriorityAsync(ReportManager.ServiceReference.Priority priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsInPeriodResponse")]
        ReportManager.ServiceReference.AlarmInvocation[] GetAlarmsInPeriod(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsInPeriodResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference.AlarmInvocation[]> GetAlarmsInPeriodAsync(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetDigitalInputTagValues", ReplyAction="http://tempuri.org/IReportManager/GetDigitalInputTagValuesResponse")]
        ReportManager.ServiceReference.InputTagValue[] GetDigitalInputTagValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetDigitalInputTagValues", ReplyAction="http://tempuri.org/IReportManager/GetDigitalInputTagValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetDigitalInputTagValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAnalogInputTagValues", ReplyAction="http://tempuri.org/IReportManager/GetAnalogInputTagValuesResponse")]
        ReportManager.ServiceReference.InputTagValue[] GetAnalogInputTagValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAnalogInputTagValues", ReplyAction="http://tempuri.org/IReportManager/GetAnalogInputTagValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetAnalogInputTagValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetInputTagValuesByTagName", ReplyAction="http://tempuri.org/IReportManager/GetInputTagValuesByTagNameResponse")]
        ReportManager.ServiceReference.InputTagValue[] GetInputTagValuesByTagName(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetInputTagValuesByTagName", ReplyAction="http://tempuri.org/IReportManager/GetInputTagValuesByTagNameResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetInputTagValuesByTagNameAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetInputTagValuesByPeriod", ReplyAction="http://tempuri.org/IReportManager/GetInputTagValuesByPeriodResponse")]
        ReportManager.ServiceReference.InputTagValue[] GetInputTagValuesByPeriod(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetInputTagValuesByPeriod", ReplyAction="http://tempuri.org/IReportManager/GetInputTagValuesByPeriodResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetInputTagValuesByPeriodAsync(System.DateTime start, System.DateTime end);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerChannel : ReportManager.ServiceReference.IReportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerClient : System.ServiceModel.ClientBase<ReportManager.ServiceReference.IReportManager>, ReportManager.ServiceReference.IReportManager {
        
        public ReportManagerClient() {
        }
        
        public ReportManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ReportManager.ServiceReference.AlarmInvocation[] GetAlarmsByPriority(ReportManager.ServiceReference.Priority priority) {
            return base.Channel.GetAlarmsByPriority(priority);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference.AlarmInvocation[]> GetAlarmsByPriorityAsync(ReportManager.ServiceReference.Priority priority) {
            return base.Channel.GetAlarmsByPriorityAsync(priority);
        }
        
        public ReportManager.ServiceReference.AlarmInvocation[] GetAlarmsInPeriod(System.DateTime start, System.DateTime end) {
            return base.Channel.GetAlarmsInPeriod(start, end);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference.AlarmInvocation[]> GetAlarmsInPeriodAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.GetAlarmsInPeriodAsync(start, end);
        }
        
        public ReportManager.ServiceReference.InputTagValue[] GetDigitalInputTagValues() {
            return base.Channel.GetDigitalInputTagValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetDigitalInputTagValuesAsync() {
            return base.Channel.GetDigitalInputTagValuesAsync();
        }
        
        public ReportManager.ServiceReference.InputTagValue[] GetAnalogInputTagValues() {
            return base.Channel.GetAnalogInputTagValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetAnalogInputTagValuesAsync() {
            return base.Channel.GetAnalogInputTagValuesAsync();
        }
        
        public ReportManager.ServiceReference.InputTagValue[] GetInputTagValuesByTagName(string tagName) {
            return base.Channel.GetInputTagValuesByTagName(tagName);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetInputTagValuesByTagNameAsync(string tagName) {
            return base.Channel.GetInputTagValuesByTagNameAsync(tagName);
        }
        
        public ReportManager.ServiceReference.InputTagValue[] GetInputTagValuesByPeriod(System.DateTime start, System.DateTime end) {
            return base.Channel.GetInputTagValuesByPeriod(start, end);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference.InputTagValue[]> GetInputTagValuesByPeriodAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.GetInputTagValuesByPeriodAsync(start, end);
        }
    }
}
